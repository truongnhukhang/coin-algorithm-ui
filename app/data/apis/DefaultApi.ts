/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BackTest,
    BackTestFromJSON,
    BackTestToJSON,
    BackTestResult,
    BackTestResultFromJSON,
    BackTestResultToJSON,
    BackTestRunResponse,
    BackTestRunResponseFromJSON,
    BackTestRunResponseToJSON,
    BackTestSubmitResponse,
    BackTestSubmitResponseFromJSON,
    BackTestSubmitResponseToJSON,
    Online,
    OnlineFromJSON,
    OnlineToJSON,
    OnlineCreateResponse,
    OnlineCreateResponseFromJSON,
    OnlineCreateResponseToJSON,
    OnlineRequest,
    OnlineRequestFromJSON,
    OnlineRequestToJSON,
} from '../models';

export interface BackTestRequest {
    backTestRequest?: string;
}

export interface CreateOnlineRequest {
    onlineRequest?: OnlineRequest;
}

export interface GetBackTestResultRequest {
    ident?: string;
    position?: string;
    len?: string;
}

export interface GetBackTestRunsRequest {
    sortBy?: string;
    ident?: string;
    page?: string;
    pageSize?: string;
}

export interface GetBackTestsRequest {
    page?: string;
    pageSize?: string;
}

export interface GetOnlineListRequest {
    page?: string;
    pageSize?: string;
}

/**
 * DefaultApi - interface
 * 
 * @export
 * @interface DefaultApiInterface
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Create a back test
     * @param {string} [backTestRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    backTestRaw(requestParameters: BackTestRequest): Promise<runtime.ApiResponse<BackTestSubmitResponse>>;

    /**
     * Create a back test
     */
    backTest(requestParameters: BackTestRequest): Promise<BackTestSubmitResponse>;

    /**
     * 
     * @summary Create an online
     * @param {OnlineRequest} [onlineRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createOnlineRaw(requestParameters: CreateOnlineRequest): Promise<runtime.ApiResponse<OnlineCreateResponse>>;

    /**
     * Create an online
     */
    createOnline(requestParameters: CreateOnlineRequest): Promise<OnlineCreateResponse>;

    /**
     * 
     * @summary get backtest result
     * @param {string} [ident] Ident
     * @param {string} [position] position
     * @param {string} [len] len
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBackTestResultRaw(requestParameters: GetBackTestResultRequest): Promise<runtime.ApiResponse<BackTestResult>>;

    /**
     * get backtest result
     */
    getBackTestResult(requestParameters: GetBackTestResultRequest): Promise<BackTestResult>;

    /**
     * 
     * @summary get backtest run list
     * @param {string} [sortBy] sortBy
     * @param {string} [ident] Ident
     * @param {string} [page] page
     * @param {string} [pageSize] page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBackTestRunsRaw(requestParameters: GetBackTestRunsRequest): Promise<runtime.ApiResponse<BackTestRunResponse>>;

    /**
     * get backtest run list
     */
    getBackTestRuns(requestParameters: GetBackTestRunsRequest): Promise<BackTestRunResponse>;

    /**
     * 
     * @summary get backtest list
     * @param {string} [page] page
     * @param {string} [pageSize] page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getBackTestsRaw(requestParameters: GetBackTestsRequest): Promise<runtime.ApiResponse<Array<BackTest>>>;

    /**
     * get backtest list
     */
    getBackTests(requestParameters: GetBackTestsRequest): Promise<Array<BackTest>>;

    /**
     * 
     * @summary get online list
     * @param {string} [page] page
     * @param {string} [pageSize] page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getOnlineListRaw(requestParameters: GetOnlineListRequest): Promise<runtime.ApiResponse<Array<Online>>>;

    /**
     * get online list
     */
    getOnlineList(requestParameters: GetOnlineListRequest): Promise<Array<Online>>;

}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI implements DefaultApiInterface {

    /**
     * Create a back test
     */
    async backTestRaw(requestParameters: BackTestRequest): Promise<runtime.ApiResponse<BackTestSubmitResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.backTestRequest !== undefined) {
            formParams.append('backTestRequest', requestParameters.backTestRequest as any);
        }

        const response = await this.request({
            path: `/api/backtest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BackTestSubmitResponseFromJSON(jsonValue));
    }

    /**
     * Create a back test
     */
    async backTest(requestParameters: BackTestRequest): Promise<BackTestSubmitResponse> {
        const response = await this.backTestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create an online
     */
    async createOnlineRaw(requestParameters: CreateOnlineRequest): Promise<runtime.ApiResponse<OnlineCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/online`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OnlineRequestToJSON(requestParameters.onlineRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OnlineCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create an online
     */
    async createOnline(requestParameters: CreateOnlineRequest): Promise<OnlineCreateResponse> {
        const response = await this.createOnlineRaw(requestParameters);
        return await response.value();
    }

    /**
     * get backtest result
     */
    async getBackTestResultRaw(requestParameters: GetBackTestResultRequest): Promise<runtime.ApiResponse<BackTestResult>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ident !== undefined) {
            queryParameters['ident'] = requestParameters.ident;
        }

        if (requestParameters.position !== undefined) {
            queryParameters['position'] = requestParameters.position;
        }

        if (requestParameters.len !== undefined) {
            queryParameters['len'] = requestParameters.len;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backtestresult`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BackTestResultFromJSON(jsonValue));
    }

    /**
     * get backtest result
     */
    async getBackTestResult(requestParameters: GetBackTestResultRequest): Promise<BackTestResult> {
        const response = await this.getBackTestResultRaw(requestParameters);
        return await response.value();
    }

    /**
     * get backtest run list
     */
    async getBackTestRunsRaw(requestParameters: GetBackTestRunsRequest): Promise<runtime.ApiResponse<BackTestRunResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.ident !== undefined) {
            queryParameters['ident'] = requestParameters.ident;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backtestrun`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BackTestRunResponseFromJSON(jsonValue));
    }

    /**
     * get backtest run list
     */
    async getBackTestRuns(requestParameters: GetBackTestRunsRequest): Promise<BackTestRunResponse> {
        const response = await this.getBackTestRunsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get backtest list
     */
    async getBackTestsRaw(requestParameters: GetBackTestsRequest): Promise<runtime.ApiResponse<Array<BackTest>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/backtest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BackTestFromJSON));
    }

    /**
     * get backtest list
     */
    async getBackTests(requestParameters: GetBackTestsRequest): Promise<Array<BackTest>> {
        const response = await this.getBackTestsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get online list
     */
    async getOnlineListRaw(requestParameters: GetOnlineListRequest): Promise<runtime.ApiResponse<Array<Online>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/online`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OnlineFromJSON));
    }

    /**
     * get online list
     */
    async getOnlineList(requestParameters: GetOnlineListRequest): Promise<Array<Online>> {
        const response = await this.getOnlineListRaw(requestParameters);
        return await response.value();
    }

}
