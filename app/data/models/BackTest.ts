/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BackTestRequest,
    BackTestRequestFromJSON,
    BackTestRequestFromJSONTyped,
    BackTestRequestToJSON,
    BackTestStatus,
    BackTestStatusFromJSON,
    BackTestStatusFromJSONTyped,
    BackTestStatusToJSON,
} from './';

/**
 * 
 * @export
 * @interface BackTest
 */
export interface BackTest {
    /**
     * 
     * @type {number}
     * @memberof BackTest
     */
    totalBackTestRun: number;
    /**
     * 
     * @type {number}
     * @memberof BackTest
     */
    numberParallelism: number;
    /**
     * 
     * @type {number}
     * @memberof BackTest
     */
    priority: number;
    /**
     * 
     * @type {string}
     * @memberof BackTest
     */
    id?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof BackTest
     */
    configs?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof BackTest
     */
    ident?: string;
    /**
     * 
     * @type {BackTestRequest}
     * @memberof BackTest
     */
    backTestRequest?: BackTestRequest;
    /**
     * 
     * @type {string}
     * @memberof BackTest
     */
    botPath?: string;
    /**
     * 
     * @type {BackTestStatus}
     * @memberof BackTest
     */
    status?: BackTestStatus;
    /**
     * 
     * @type {string}
     * @memberof BackTest
     */
    note?: string;
}

export function BackTestFromJSON(json: any): BackTest {
    return BackTestFromJSONTyped(json, false);
}

export function BackTestFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackTest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalBackTestRun': json['totalBackTestRun'],
        'numberParallelism': json['numberParallelism'],
        'priority': json['priority'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'configs': !exists(json, 'configs') ? undefined : json['configs'],
        'ident': !exists(json, 'ident') ? undefined : json['ident'],
        'backTestRequest': !exists(json, 'backTestRequest') ? undefined : BackTestRequestFromJSON(json['backTestRequest']),
        'botPath': !exists(json, 'botPath') ? undefined : json['botPath'],
        'status': !exists(json, 'status') ? undefined : BackTestStatusFromJSON(json['status']),
        'note': !exists(json, 'note') ? undefined : json['note'],
    };
}

export function BackTestToJSON(value?: BackTest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalBackTestRun': value.totalBackTestRun,
        'numberParallelism': value.numberParallelism,
        'priority': value.priority,
        'id': value.id,
        'configs': value.configs,
        'ident': value.ident,
        'backTestRequest': BackTestRequestToJSON(value.backTestRequest),
        'botPath': value.botPath,
        'status': BackTestStatusToJSON(value.status),
        'note': value.note,
    };
}


