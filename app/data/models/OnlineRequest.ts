/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BotOrderType,
    BotOrderTypeFromJSON,
    BotOrderTypeFromJSONTyped,
    BotOrderTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface OnlineRequest
 */
export interface OnlineRequest {
    /**
     * 
     * @type {boolean}
     * @memberof OnlineRequest
     */
    enableCloseMode: boolean;
    /**
     * 
     * @type {number}
     * @memberof OnlineRequest
     */
    preFetchBar: number;
    /**
     * 
     * @type {number}
     * @memberof OnlineRequest
     */
    initBalance: number;
    /**
     * 
     * @type {number}
     * @memberof OnlineRequest
     */
    makerFee: number;
    /**
     * 
     * @type {number}
     * @memberof OnlineRequest
     */
    takerFee: number;
    /**
     * 
     * @type {BotOrderType}
     * @memberof OnlineRequest
     */
    botOrderType?: BotOrderType;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof OnlineRequest
     */
    indicatorParam?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof OnlineRequest
     */
    coin?: string;
    /**
     * 
     * @type {string}
     * @memberof OnlineRequest
     */
    mainInterval?: string;
    /**
     * 
     * @type {string}
     * @memberof OnlineRequest
     */
    exchange?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnlineRequest
     */
    otherIntervals?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OnlineRequest
     */
    botPath?: string;
    /**
     * 
     * @type {string}
     * @memberof OnlineRequest
     */
    botName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OnlineRequest
     */
    btcDomIntervals?: Array<string>;
}

export function OnlineRequestFromJSON(json: any): OnlineRequest {
    return OnlineRequestFromJSONTyped(json, false);
}

export function OnlineRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OnlineRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enableCloseMode': json['enableCloseMode'],
        'preFetchBar': json['preFetchBar'],
        'initBalance': json['initBalance'],
        'makerFee': json['makerFee'],
        'takerFee': json['takerFee'],
        'botOrderType': !exists(json, 'botOrderType') ? undefined : BotOrderTypeFromJSON(json['botOrderType']),
        'indicatorParam': !exists(json, 'indicatorParam') ? undefined : json['indicatorParam'],
        'coin': !exists(json, 'coin') ? undefined : json['coin'],
        'mainInterval': !exists(json, 'mainInterval') ? undefined : json['mainInterval'],
        'exchange': !exists(json, 'exchange') ? undefined : json['exchange'],
        'otherIntervals': !exists(json, 'otherIntervals') ? undefined : json['otherIntervals'],
        'botPath': !exists(json, 'botPath') ? undefined : json['botPath'],
        'botName': !exists(json, 'botName') ? undefined : json['botName'],
        'btcDomIntervals': !exists(json, 'btcDomIntervals') ? undefined : json['btcDomIntervals'],
    };
}

export function OnlineRequestToJSON(value?: OnlineRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enableCloseMode': value.enableCloseMode,
        'preFetchBar': value.preFetchBar,
        'initBalance': value.initBalance,
        'makerFee': value.makerFee,
        'takerFee': value.takerFee,
        'botOrderType': BotOrderTypeToJSON(value.botOrderType),
        'indicatorParam': value.indicatorParam,
        'coin': value.coin,
        'mainInterval': value.mainInterval,
        'exchange': value.exchange,
        'otherIntervals': value.otherIntervals,
        'botPath': value.botPath,
        'botName': value.botName,
        'btcDomIntervals': value.btcDomIntervals,
    };
}


